// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id           String   @id @default(uuid()) @db.Uuid
  sessionId    String
  session      Session  @relation(fields: [sessionId], references: [id])
  duration     Int
  eventType    String
  hash         String
  sourceType   String
  creationDate DateTime @default(now())
}

model Session {
  id           String   @id
  teamId       String?  @db.Uuid
  team         Team?    @relation(fields: [teamId], references: [id])
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  events       Event[]
  creationDate DateTime @default(now())
}

model User {
  id           String     @id @default(uuid()) @db.Uuid
  username     String     @unique
  name         String
  email        String     @unique
  isSuperAdmin Boolean    @default(false)
  role         String     @default("DEVELOPER")
  isDeleted    Boolean    @default(false)
  isExternal   Boolean    @default(false)
  sessions     Session[]
  tokens       Token[]
  memberships  Member[]
  artifacts    Artifact[]
  creationDate DateTime   @default(now())
  password     Password[]
}

model Password {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  passwordHash String
  creationDate DateTime @default(now())
}

model Team {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @unique
  avatar       String?
  creationDate DateTime   @default(now())
  isDeleted    Boolean    @default(false)
  slug         String     @unique
  sessions     Session[]
  members      Member[]
  artifacts    Artifact[]
}

model Token {
  id           String    @id @default(uuid()) @db.Uuid
  hash         String    @unique
  name         String
  creationDate DateTime  @default(now())
  lastUsedDate DateTime?
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id])
}

model Artifact {
  id            String    @id
  hash          String
  teamId        String?   @db.Uuid
  team          Team?     @relation(fields: [teamId], references: [id])
  userId        String    @db.Uuid
  user          User      @relation(fields: [userId], references: [id])
  creationDate  DateTime  @default(now())
  duration      Int       @default(0)
  contentLength Int       @default(0)
  hitCount      Int       @default(0)
  lastHitDate   DateTime?
}

model Member {
  id           String   @id @default(uuid()) @db.Uuid
  teamId       String   @db.Uuid
  team         Team     @relation(fields: [teamId], references: [id])
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  role         String   @default("MEMBER")
  creationDate DateTime @default(now())
}
